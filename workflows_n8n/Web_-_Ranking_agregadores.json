={
  "createdAt": "2025-10-09T16:07:34.281Z",
  "updatedAt": "2025-10-14T20:19:25.000Z",
  "id": "1tuv7r0TLTv4yikL",
  "name": "Web - Ranking agregadores",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "372e7d53-608e-4168-91bc-cc456f13360b",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "0692d445-7ee3-4199-9b6a-09759d931b32",
      "name": "Webhook",
      "webhookId": "372e7d53-608e-4168-91bc-cc456f13360b"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.htmlContent }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        624,
        0
      ],
      "id": "1ef64911-b8f2-4108-b0b1-6853a829843c",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM clasificacion_aggs",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        208,
        0
      ],
      "id": "5367dc0e-c348-4bc6-8ccd-c91dd0a95279",
      "name": "clasificacion_aggs",
      "credentials": {
        "mySql": {
          "id": "ptMDph8au7xSwRzr",
          "name": "MySQL datos_red"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function safeFloat(val, fallback = 0) {\n  const num = parseFloat(val);\n  return isNaN(num) ? fallback : num;\n}\n\n// Obtener datos\nconst items = $input.all().map(item => item.json);\n\n// Extraer \"Sitio\" (primera parte del Acronimo)\nconst itemsWithSitio = items.map(item => {\n  const sitio = (item.Acronimo || '').split('-')[0] || '';\n  return { ...item, sitio };\n});\n\n// Calcular \"Puntaje Sitio\" (suma por sitio)\nconst puntajeSitioMap = {};\nitemsWithSitio.forEach(item => {\n  puntajeSitioMap[item.sitio] = (puntajeSitioMap[item.sitio] || 0) + safeFloat(item.puntaje_ranking);\n});\n\n// Añadir puntaje_sitio a cada item\nconst enrichedItems = itemsWithSitio.map(item => ({\n  ...item,\n  puntaje_sitio: safeFloat(puntajeSitioMap[item.sitio])\n}));\n\n// Definir columnas (sin índice en los datos, se agrega visualmente)\nconst dataColumns = [\n  { key: 'sitio', label: 'Sitio' },\n  { key: 'Acronimo', label: 'Acrónimo' },\n  { key: 'Equipo', label: 'Equipo' },\n  { key: 'Region_MST', label: 'Región' },\n  { key: 'puntaje_ranking', label: 'Puntaje Ranking', isScore: true },\n  { key: 'puntaje_region', label: 'Puntaje Región', isScore: true },\n  { key: 'puntaje_trafico', label: 'Puntaje Tráfico', isScore: true },\n  { key: 'puntaje_sitio', label: 'Puntaje Sitio', isScore: true }\n];\n\n// Ordenar inicialmente por puntaje_ranking descendente\nconst sorted = [...enrichedItems].sort((a, b) => \n  safeFloat(b.puntaje_ranking) - safeFloat(a.puntaje_ranking)\n);\n\n// Generar filas iniciales (solo para previsualización en n8n, el JS hará el render real)\nconst rows = sorted.map((item, i) => {\n  const cells = [\n    `<td class=\"index-col\">${i + 1}</td>`,\n    ...dataColumns.map(col => {\n      let value = col.key === 'sitio' ? item.sitio : item[col.key];\n      const displayValue = col.isScore ? safeFloat(value).toFixed(2) : (value != null ? value : '');\n      const className = col.isScore ? 'score' : '';\n      return `<td data-label=\"${col.label}\" class=\"${className}\">${displayValue}</td>`;\n    })\n  ].join('');\n  return `<tr>${cells}</tr>`;\n}).join('');\n\n// Generar encabezados: # + columnas con filtros\nconst headerCells = `\n  <th class=\"index-header\">#</th>\n  ${dataColumns.map(col => `\n    <th>\n      <div class=\"header-wrapper\">\n        <button class=\"sort-btn\" data-column=\"${col.key}\">${col.label}</button>\n        <input type=\"text\" class=\"filter-input\" data-column=\"${col.key}\" placeholder=\"Filtrar...\" />\n      </div>\n    </th>\n  `).join('')}\n`;\n\n// HTML completo en modo oscuro\nconst html = `\n<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Ranking de Concentradores</title>\n  <style>\n    * { box-sizing: border-box; margin: 0; padding: 0; }\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      background: #121212;\n      color: #e0e0e0;\n      padding: 20px;\n    }\n    .container {\n      width: 100%;\n      background: #1e1e1e;\n      border-radius: 12px;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);\n      overflow: hidden;\n    }\n    h1 {\n      text-align: center;\n      padding: 20px;\n      font-weight: 600;\n      color: #ffffff;\n      font-size: 24px;\n    }\n    .table-wrapper {\n      width: 100%;\n      overflow-x: auto;\n      padding: 0 20px 20px;\n    }\n    table {\n      width: 100%;\n      table-layout: fixed;\n      border-collapse: collapse;\n    }\n    th, td {\n      padding: 12px 10px;\n      text-align: left;\n      font-size: 13px;\n      border-bottom: 1px solid #333333;\n      word-wrap: break-word;\n    }\n    .index-header, .index-col {\n      text-align: center;\n      font-weight: 500;\n      color: #aaaaaa;\n      background: #252525;\n    }\n    th:not(.index-header) {\n      background: #252525;\n      position: sticky;\n      top: 0;\n      font-weight: 600;\n      color: #ffffff;\n      vertical-align: top;\n      padding-top: 16px;\n      padding-bottom: 10px;\n    }\n    .header-wrapper {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 6px;\n    }\n    .sort-btn {\n      background: none;\n      border: none;\n      cursor: pointer;\n      font-weight: 600;\n      font-size: 13px;\n      color: #ffffff;\n      padding: 2px 4px;\n      border-radius: 4px;\n    }\n    .sort-btn:hover {\n      background: #2d2d2d;\n      color: #4da6ff;\n    }\n    .filter-input {\n      width: 100%;\n      max-width: 160px;\n      padding: 6px 10px;\n      font-size: 12px;\n      background: #2d2d2d;\n      border: 1px solid #444444;\n      border-radius: 4px;\n      outline: none;\n      color: #ffffff;\n    }\n    .filter-input:focus {\n      border-color: #4da6ff;\n      box-shadow: 0 0 0 2px rgba(77, 166, 255, 0.3);\n    }\n    .score {\n      font-weight: 600;\n      color: #4da6ff;\n      text-align: right;\n    }\n    tr:hover td {\n      background-color: #2a2a2a;\n    }\n    @media (max-width: 768px) {\n      body { padding: 12px; }\n      h1 { font-size: 20px; padding: 16px; }\n      .table-wrapper { padding: 0 12px 16px; }\n      th, td { padding: 10px 8px; font-size: 12px; }\n      .filter-input { max-width: 100px; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Ranking de Concentradores (${sorted.length} items)</h1>\n    <div class=\"table-wrapper\">\n      <table id=\"rankingTable\">\n        <thead>\n          <tr>\n            ${headerCells}\n          </tr>\n        </thead>\n        <tbody>\n          ${rows}\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <script>\n    // Datos originales\n    const originalData = ${JSON.stringify(enrichedItems)};\n    const tableBody = document.querySelector('#rankingTable tbody');\n    const sortButtons = document.querySelectorAll('.sort-btn');\n    const filterInputs = document.querySelectorAll('.filter-input');\n    \n    let currentSort = { key: 'puntaje_ranking', dir: -1 };\n    let activeFilters = {};\n\n    // Función para ordenar\n    function sortData(data, key, dir) {\n      return data.sort((a, b) => {\n        let valA = a[key];\n        let valB = b[key];\n        if (typeof valA === 'string' && !isNaN(valA)) valA = parseFloat(valA);\n        if (typeof valB === 'string' && !isNaN(valB)) valB = parseFloat(valB);\n        if (typeof valA === 'number' && typeof valB === 'number') {\n          return dir * (valB - valA);\n        }\n        valA = String(valA || '').toLowerCase();\n        valB = String(valB || '').toLowerCase();\n        if (valA < valB) return -dir;\n        if (valA > valB) return dir;\n        return 0;\n      });\n    }\n\n    // Función para filtrar\n    function filterData(data) {\n      return data.filter(row => {\n        return Object.entries(activeFilters).every(([key, term]) => {\n          const value = String(row[key] != null ? row[key] : '').toLowerCase();\n          return value.includes(term.toLowerCase());\n        });\n      });\n    }\n\n    // Renderizar tabla\n    function renderTable() {\n      let data = filterData([...originalData]);\n      data = sortData(data, currentSort.key, currentSort.dir);\n      \n      const rows = data.map((item, index) => {\n        const cells = [\n          \\`<td class=\"index-col\">\\${index + 1}</td>\\`,\n          { key: 'sitio', value: item.sitio, isScore: false, label: 'Sitio' },\n          { key: 'Acronimo', value: item.Acronimo, isScore: false, label: 'Acrónimo' },\n          { key: 'Equipo', value: item.Equipo, isScore: false, label: 'Equipo' },\n          { key: 'Region_MST', value: item.Region_MST, isScore: false, label: 'Región' },\n          { key: 'puntaje_ranking', value: item.puntaje_ranking, isScore: true, label: 'Puntaje Ranking' },\n          { key: 'puntaje_region', value: item.puntaje_region, isScore: true, label: 'Puntaje Región' },\n          { key: 'puntaje_trafico', value: item.puntaje_trafico, isScore: true, label: 'Puntaje Tráfico' },\n          { key: 'puntaje_sitio', value: item.puntaje_sitio, isScore: true, label: 'Puntaje Sitio' }\n        ].map((col, i) => {\n          if (i === 0) return col; // ya es la celda de índice\n          const display = col.isScore ? parseFloat(col.value).toFixed(2) : (col.value != null ? col.value : '');\n          const cls = col.isScore ? 'score' : '';\n          return \\`<td data-label=\"\\${col.label}\" class=\"\\${cls}\">\\${display}</td>\\`;\n        }).join('');\n        return \\`<tr>\\${cells}</tr>\\`;\n      }).join('');\n      \n      tableBody.innerHTML = rows;\n    }\n\n    // Eventos de ordenamiento\n    sortButtons.forEach(btn => {\n      btn.addEventListener('click', () => {\n        const colKey = btn.dataset.column;\n        if (currentSort.key === colKey) {\n          currentSort.dir *= -1;\n        } else {\n          currentSort = { key: colKey, dir: -1 };\n        }\n        renderTable();\n      });\n    });\n\n    // Eventos de filtro\n    filterInputs.forEach(input => {\n      input.addEventListener('input', () => {\n        const key = input.dataset.column;\n        const value = input.value.trim();\n        if (value) {\n          activeFilters[key] = value;\n        } else {\n          delete activeFilters[key];\n        }\n        renderTable();\n      });\n    });\n\n    // Render inicial\n    renderTable();\n  </script>\n</body>\n</html>\n`;\n\n// Devolver el HTML\nreturn [{ json: { htmlContent: html } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "1eaa6cea-885f-48d1-91ff-a57277e66055",
      "name": "html"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "clasificacion_aggs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "clasificacion_aggs": {
      "main": [
        [
          {
            "node": "html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "html": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "ce4f6c53-bc2c-4926-b9e0-5f12a3c78a9e",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-10-09T16:07:34.284Z",
      "updatedAt": "2025-10-09T16:07:34.284Z",
      "role": "workflow:owner",
      "workflowId": "1tuv7r0TLTv4yikL",
      "projectId": "QdIaKjwyS02MMGZQ",
      "project": {
        "createdAt": "2025-09-11T18:03:44.820Z",
        "updatedAt": "2025-09-11T18:10:14.443Z",
        "id": "QdIaKjwyS02MMGZQ",
        "name": "Soporte Acceso Empresas  Empresas <saf.empresas@claro.com.ar>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-09-11T18:03:44.820Z",
            "updatedAt": "2025-09-11T18:03:44.820Z",
            "userId": "4facc838-fc29-4888-93e5-fd2ef787b161",
            "projectId": "QdIaKjwyS02MMGZQ",
            "user": {
              "createdAt": "2025-09-11T18:03:44.372Z",
              "updatedAt": "2025-10-15T09:00:53.000Z",
              "id": "4facc838-fc29-4888-93e5-fd2ef787b161",
              "email": "saf.empresas@claro.com.ar",
              "firstName": "Soporte Acceso Empresas",
              "lastName": " Empresas",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-09-11T18:11:25.739Z",
                "personalization_survey_n8n_version": "1.110.1",
                "automationGoalDevops": [
                  "ticketing-systems-integrations"
                ],
                "companyIndustryExtended": [
                  "telecoms"
                ],
                "companySize": "1000+",
                "companyType": "other",
                "role": "devops",
                "reportedSource": "event"
              },
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "qNvPVx6pVl6SWob0",
                "userActivatedAt": 1758135955025,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1759778484200
                },
                "easyAIWorkflowOnboarded": true
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-15",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}